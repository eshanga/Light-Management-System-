
test receiver with lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000584  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  000005f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013aa  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bb  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073e  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  88:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Lcd_CmdWrite>:
	Lcd_DataWrite('A');
	Lcd_DataWrite(' ');
	Lcd_DataWrite('1');
	Lcd_DataWrite('2');
	//Lcd_CmdWrite(0x01);
}
  90:	98 2f       	mov	r25, r24
  92:	90 7f       	andi	r25, 0xF0	; 240
  94:	9b b9       	out	0x0b, r25	; 11
  96:	59 98       	cbi	0x0b, 1	; 11
  98:	5a 98       	cbi	0x0b, 2	; 11
  9a:	5b 9a       	sbi	0x0b, 3	; 11
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	fc e9       	ldi	r31, 0x9C	; 156
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <Lcd_CmdWrite+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <Lcd_CmdWrite+0x16>
  a6:	00 00       	nop
  a8:	5b 98       	cbi	0x0b, 3	; 11
  aa:	ef e3       	ldi	r30, 0x3F	; 63
  ac:	fc e9       	ldi	r31, 0x9C	; 156
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <Lcd_CmdWrite+0x1e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <Lcd_CmdWrite+0x24>
  b4:	00 00       	nop
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	59 98       	cbi	0x0b, 1	; 11
  c2:	5a 98       	cbi	0x0b, 2	; 11
  c4:	5b 9a       	sbi	0x0b, 3	; 11
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9c e9       	ldi	r25, 0x9C	; 156
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <Lcd_CmdWrite+0x3a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <Lcd_CmdWrite+0x40>
  d0:	00 00       	nop
  d2:	5b 98       	cbi	0x0b, 3	; 11
  d4:	ef e3       	ldi	r30, 0x3F	; 63
  d6:	fc e9       	ldi	r31, 0x9C	; 156
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <Lcd_CmdWrite+0x48>
  dc:	00 c0       	rjmp	.+0      	; 0xde <Lcd_CmdWrite+0x4e>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <Lcd_DataWrite>:
  e2:	98 2f       	mov	r25, r24
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	9b b9       	out	0x0b, r25	; 11
  e8:	59 9a       	sbi	0x0b, 1	; 11
  ea:	5a 98       	cbi	0x0b, 2	; 11
  ec:	5b 9a       	sbi	0x0b, 3	; 11
  ee:	ef e3       	ldi	r30, 0x3F	; 63
  f0:	fc e9       	ldi	r31, 0x9C	; 156
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <Lcd_DataWrite+0x10>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <Lcd_DataWrite+0x16>
  f8:	00 00       	nop
  fa:	5b 98       	cbi	0x0b, 3	; 11
  fc:	ef e3       	ldi	r30, 0x3F	; 63
  fe:	fc e9       	ldi	r31, 0x9C	; 156
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Lcd_DataWrite+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Lcd_DataWrite+0x24>
 106:	00 00       	nop
 108:	f0 e1       	ldi	r31, 0x10	; 16
 10a:	8f 9f       	mul	r24, r31
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	8b b9       	out	0x0b, r24	; 11
 112:	59 9a       	sbi	0x0b, 1	; 11
 114:	5a 98       	cbi	0x0b, 2	; 11
 116:	5b 9a       	sbi	0x0b, 3	; 11
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9c e9       	ldi	r25, 0x9C	; 156
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Lcd_DataWrite+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Lcd_DataWrite+0x40>
 122:	00 00       	nop
 124:	5b 98       	cbi	0x0b, 3	; 11
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	fc e9       	ldi	r31, 0x9C	; 156
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <Lcd_DataWrite+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <Lcd_DataWrite+0x4e>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <Lcd_init>:
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 140:	8e e0       	ldi	r24, 0x0E	; 14
 142:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 14c:	08 95       	ret

0000014e <displayStart>:
 14e:	cf 93       	push	r28
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 156:	c0 e1       	ldi	r28, 0x10	; 16
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 15e:	c1 50       	subi	r28, 0x01	; 1
 160:	d9 f7       	brne	.-10     	; 0x158 <displayStart+0xa>
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 16e:	82 e5       	ldi	r24, 0x52	; 82
 170:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 174:	85 e4       	ldi	r24, 0x45	; 69
 176:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 180:	80 e2       	ldi	r24, 0x20	; 32
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <displayEnd>:
 190:	cf 93       	push	r28
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 198:	c0 e1       	ldi	r28, 0x10	; 16
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1a0:	c1 50       	subi	r28, 0x01	; 1
 1a2:	d9 f7       	brne	.-10     	; 0x19a <displayEnd+0xa>
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1b0:	82 e5       	ldi	r24, 0x52	; 82
 1b2:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1b6:	85 e4       	ldi	r24, 0x45	; 69
 1b8:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1c8:	82 e3       	ldi	r24, 0x32	; 50
 1ca:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <displayStand>:

void displayStand(void)
{
	//Lcd_CmdWrite(0x01);
	Lcd_CmdWrite(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
	Lcd_DataWrite('S');
 1d8:	83 e5       	ldi	r24, 0x53	; 83
 1da:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('T');
 1de:	84 e5       	ldi	r24, 0x54	; 84
 1e0:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('A');
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('N');
 1ea:	8e e4       	ldi	r24, 0x4E	; 78
 1ec:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('D');
 1f0:	84 e4       	ldi	r24, 0x44	; 68
 1f2:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite(' ');
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('B');
 1fc:	82 e4       	ldi	r24, 0x42	; 66
 1fe:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('Y');
 202:	89 e5       	ldi	r24, 0x59	; 89
 204:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite(':');
 208:	8a e3       	ldi	r24, 0x3A	; 58
 20a:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 20e:	08 95       	ret

00000210 <displayZero>:
	
}
void displayZero(void)
{
 210:	cf 93       	push	r28
	Lcd_CmdWrite(0xC0);
 212:	80 ec       	ldi	r24, 0xC0	; 192
 214:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 218:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++) {
		Lcd_DataWrite(' '); // Write empty space to clear the character
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 220:	c1 50       	subi	r28, 0x01	; 1
	
}
void displayZero(void)
{
	Lcd_CmdWrite(0xC0);
	for (uint8_t i = 0; i < 16; i++) {
 222:	d9 f7       	brne	.-10     	; 0x21a <displayZero+0xa>
		Lcd_DataWrite(' '); // Write empty space to clear the character
	}
	Lcd_CmdWrite(0xC0);
 224:	80 ec       	ldi	r24, 0xC0	; 192
 226:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
	Lcd_DataWrite('N');
 22a:	8e e4       	ldi	r24, 0x4E	; 78
 22c:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('O');
 230:	8f e4       	ldi	r24, 0x4F	; 79
 232:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite(' ');
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('V');
 23c:	86 e5       	ldi	r24, 0x56	; 86
 23e:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('I');
 242:	89 e4       	ldi	r24, 0x49	; 73
 244:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('S');
 248:	83 e5       	ldi	r24, 0x53	; 83
 24a:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('I');
 24e:	89 e4       	ldi	r24, 0x49	; 73
 250:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('T');
 254:	84 e5       	ldi	r24, 0x54	; 84
 256:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('O');
 25a:	8f e4       	ldi	r24, 0x4F	; 79
 25c:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('R');
 260:	82 e5       	ldi	r24, 0x52	; 82
 262:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('S');
 266:	83 e5       	ldi	r24, 0x53	; 83
 268:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <displayCount>:

void displayCount(void)
{
	Lcd_DataWrite('C');
 270:	83 e4       	ldi	r24, 0x43	; 67
 272:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('O');
 276:	8f e4       	ldi	r24, 0x4F	; 79
 278:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('U');
 27c:	85 e5       	ldi	r24, 0x55	; 85
 27e:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('N');
 282:	8e e4       	ldi	r24, 0x4E	; 78
 284:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite('T');
 288:	84 e5       	ldi	r24, 0x54	; 84
 28a:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
	Lcd_DataWrite(':');
 28e:	8a e3       	ldi	r24, 0x3A	; 58
 290:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 294:	08 95       	ret

00000296 <displayData>:
}


void displayData(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
	Lcd_CmdWrite(0xC0);
 29a:	80 ec       	ldi	r24, 0xC0	; 192
 29c:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
 2a0:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < 16; i++) {
		Lcd_DataWrite(' '); // Write empty space to clear the character
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
 2a8:	c1 50       	subi	r28, 0x01	; 1


void displayData(void)
{
	Lcd_CmdWrite(0xC0);
	for (uint8_t i = 0; i < 16; i++) {
 2aa:	d9 f7       	brne	.-10     	; 0x2a2 <displayData+0xc>
		Lcd_DataWrite(' '); // Write empty space to clear the character
	}
	Lcd_CmdWrite(0xC0);
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	0e 94 48 00 	call	0x90	; 0x90 <Lcd_CmdWrite>
	displayCount();
 2b2:	0e 94 38 01 	call	0x270	; 0x270 <displayCount>
    Lcd_DataWrite(data1[1]+0x30);
 2b6:	c4 e0       	ldi	r28, 0x04	; 4
 2b8:	d1 e0       	ldi	r29, 0x01	; 1
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
    Lcd_DataWrite(data1[0]+0x30);
 2c2:	88 81       	ld	r24, Y
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	0e 94 71 00 	call	0xe2	; 0xe2 <Lcd_DataWrite>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <USART_Init>:
 uint8_t data = 0x00;

// Initializing UART
void USART_Init(void)
{
    UBRR0H = (UBRRVAL >> 8);    //high byte
 2d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t)UBRRVAL;  //low byte
 2d4:	87 e6       	ldi	r24, 0x67	; 103
 2d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    //Set data frame format: asynchronous mode, no parity, 1 stop bit, 8 bit size
    UCSR0C = (0 << UMSEL01) | (0 << UMSEL00) | (0 << UPM01) | (0 << UPM00) | (0 << USBS0) | (0 << UCSZ02) | (1 << UCSZ01) | (1 << UCSZ00);
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    //Enable Receiver Interrupt on receive complete
    UCSR0B = (1 << RXEN0) | (1 << RXCIE0);
 2e0:	80 e9       	ldi	r24, 0x90	; 144
 2e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2e6:	08 95       	ret

000002e8 <USART_vReceiveByte>:

// Read the value out of the UART buffer
uint8_t USART_vReceiveByte(void)
{
    // Wait until a byte has been received
    while ((UCSR0A & (1 << RXC0)) == 0);
 2e8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <USART_vReceiveByte+0x4>
    // Return received data
    return UDR0;
 2f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 2f6:	08 95       	ret

000002f8 <__vector_18>:

// USART Receiver interrupt service routine
ISR(USART_RX_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
    // Define variables
    uint8_t raddress, data, chk;

    // Receive destination address
    raddress = USART_vReceiveByte();
 31e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_vReceiveByte>
 322:	c8 2f       	mov	r28, r24
    // Receive data
    data = USART_vReceiveByte();
 324:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_vReceiveByte>
 328:	d8 2f       	mov	r29, r24
    // Receive checksum
    chk = USART_vReceiveByte();
 32a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USART_vReceiveByte>
    
    if (chk == (raddress + data)) 
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2d 2f       	mov	r18, r29
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	2c 0f       	add	r18, r28
 336:	31 1d       	adc	r19, r1
 338:	82 17       	cp	r24, r18
 33a:	93 07       	cpc	r25, r19
 33c:	09 f0       	breq	.+2      	; 0x340 <__vector_18+0x48>
 33e:	65 c0       	rjmp	.+202    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
    {
        if (raddress == RADDR1)
 340:	c4 34       	cpi	r28, 0x44	; 68
 342:	31 f4       	brne	.+12     	; 0x350 <__vector_18+0x58>
        {
		    if (data == 0x11) 
 344:	d1 31       	cpi	r29, 0x11	; 17
 346:	a9 f5       	brne	.+106    	; 0x3b2 <__vector_18+0xba>
            {
                PORTC |= (1 << LED1); 
 348:	40 9a       	sbi	0x08, 0	; 8
                displayStart();
 34a:	0e 94 a7 00 	call	0x14e	; 0x14e <displayStart>
 34e:	31 c0       	rjmp	.+98     	; 0x3b2 <__vector_18+0xba>
            }
        }
        
        if (raddress == RADDR2)
 350:	c5 35       	cpi	r28, 0x55	; 85
 352:	39 f4       	brne	.+14     	; 0x362 <__vector_18+0x6a>
        {
		    if (data == 0x11) 
 354:	d1 31       	cpi	r29, 0x11	; 17
 356:	09 f0       	breq	.+2      	; 0x35a <__vector_18+0x62>
 358:	58 c0       	rjmp	.+176    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            {
                PORTC |= (1 << LED2); 
 35a:	41 9a       	sbi	0x08, 1	; 8
                displayEnd();
 35c:	0e 94 c8 00 	call	0x190	; 0x190 <displayEnd>
 360:	54 c0       	rjmp	.+168    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            }
        }
		
		if (raddress == IR1_ADDRESS) // If transmitter address matches RADDR2
 362:	c3 33       	cpi	r28, 0x33	; 51
 364:	31 f5       	brne	.+76     	; 0x3b2 <__vector_18+0xba>
		{
			if (data == 0x11) // If command data is 0x11 (turn on LED1)
 366:	d1 31       	cpi	r29, 0x11	; 17
 368:	09 f0       	breq	.+2      	; 0x36c <__vector_18+0x74>
 36a:	4f c0       	rjmp	.+158    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			{
				 count=count+1;
 36c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 370:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 37a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	89 e6       	ldi	r24, 0x69	; 105
 382:	98 e1       	ldi	r25, 0x18	; 24
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <__vector_18+0x8c>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <__vector_18+0x96>
 38e:	00 00       	nop
				 _delay_ms(500);
				data1[0] =count%10;
 390:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 394:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 398:	e4 e0       	ldi	r30, 0x04	; 4
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	6a e0       	ldi	r22, 0x0A	; 10
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	0e 94 98 02 	call	0x530	; 0x530 <__divmodhi4>
 3a4:	91 83       	std	Z+1, r25	; 0x01
 3a6:	80 83       	st	Z, r24
				data1[1] =count/10;
 3a8:	73 83       	std	Z+3, r23	; 0x03
 3aa:	62 83       	std	Z+2, r22	; 0x02
				displayData();
 3ac:	0e 94 4b 01 	call	0x296	; 0x296 <displayData>
 3b0:	2c c0       	rjmp	.+88     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
					
			}
		}
		if (raddress == IR2_ADDRESS) // If transmitter address matches RADDR2
 3b2:	c2 32       	cpi	r28, 0x22	; 34
 3b4:	51 f5       	brne	.+84     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			if (data == 0x11) // If command data is 0x11 (turn on LED1)
 3b6:	d1 31       	cpi	r29, 0x11	; 17
 3b8:	41 f5       	brne	.+80     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			{
				if(count>0)
 3ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 3be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 3c2:	18 16       	cp	r1, r24
 3c4:	19 06       	cpc	r1, r25
 3c6:	fc f4       	brge	.+62     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				{
				count=count-1;;
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 3ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	89 e6       	ldi	r24, 0x69	; 105
 3d6:	98 e1       	ldi	r25, 0x18	; 24
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <__vector_18+0xe0>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <__vector_18+0xea>
 3e2:	00 00       	nop
				_delay_ms(500);
				data1[0] =count%10;
 3e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 3e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 3ec:	e4 e0       	ldi	r30, 0x04	; 4
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	6a e0       	ldi	r22, 0x0A	; 10
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	0e 94 98 02 	call	0x530	; 0x530 <__divmodhi4>
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	80 83       	st	Z, r24
				data1[1] =count/10;	
 3fc:	73 83       	std	Z+3, r23	; 0x03
 3fe:	62 83       	std	Z+2, r22	; 0x02
				displayData();
 400:	0e 94 4b 01 	call	0x296	; 0x296 <displayData>
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				}
				
				
				else if(count <= 0)
				{
					displayZero();
 406:	0e 94 08 01 	call	0x210	; 0x210 <displayZero>
				
				}
			}
		}
    }
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <debounceButton>:
volatile uint8_t button1State = 0;
volatile uint8_t button2State = 0;

// Function to debounce buttons
uint8_t debounceButton(volatile uint8_t *buttonState,volatile uint8_t pinMask)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	1f 92       	push	r1
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	fc 01       	movw	r30, r24
 43c:	69 83       	std	Y+1, r22	; 0x01
    uint8_t currentState = PINB & pinMask;
 43e:	23 b1       	in	r18, 0x03	; 3
 440:	99 81       	ldd	r25, Y+1	; 0x01
    if (currentState != *buttonState)
 442:	80 81       	ld	r24, Z
 444:	92 23       	and	r25, r18
 446:	98 17       	cp	r25, r24
 448:	91 f0       	breq	.+36     	; 0x46e <debounceButton+0x3e>
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	80 e7       	ldi	r24, 0x70	; 112
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <debounceButton+0x20>
 458:	00 c0       	rjmp	.+0      	; 0x45a <debounceButton+0x2a>
 45a:	00 00       	nop
    {
        _delay_ms(DEBOUNCE_DELAY_MS);
        currentState = PINB & pinMask;
 45c:	83 b1       	in	r24, 0x03	; 3
 45e:	99 81       	ldd	r25, Y+1	; 0x01
 460:	98 23       	and	r25, r24
        if (currentState != *buttonState)
 462:	80 81       	ld	r24, Z
 464:	98 17       	cp	r25, r24
 466:	29 f0       	breq	.+10     	; 0x472 <debounceButton+0x42>
        {
            *buttonState = currentState;
 468:	90 83       	st	Z, r25
            return currentState;
 46a:	89 2f       	mov	r24, r25
 46c:	03 c0       	rjmp	.+6      	; 0x474 <debounceButton+0x44>
        }
    }
    return 0;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	01 c0       	rjmp	.+2      	; 0x474 <debounceButton+0x44>
 472:	80 e0       	ldi	r24, 0x00	; 0
}
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <Button_Init>:

// Function to initialize buttons
void Button_Init(void)
{
    // Set PB1 and PB2 as input pins
    DDRB &= ~(1 << PB1);
 47c:	21 98       	cbi	0x04, 1	; 4
    DDRB &= ~(1 << PB2);
 47e:	22 98       	cbi	0x04, 2	; 4

    // Enable internal pull-up resistors for PB1 and PB2
    PORTB |= (1 << PB1) | (1 << PB2);
 480:	85 b1       	in	r24, 0x05	; 5
 482:	86 60       	ori	r24, 0x06	; 6
 484:	85 b9       	out	0x05, r24	; 5
 486:	08 95       	ret

00000488 <IsButton1Pressed>:
}

// Function to check if button 1 is pressed
uint8_t IsButton1Pressed(void)
{
    return debounceButton(&button1State, (1 << PB1));
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 18 02 	call	0x430	; 0x430 <debounceButton>
}
 492:	08 95       	ret

00000494 <IsButton2Pressed>:

// Function to check if button 2 is pressed
uint8_t IsButton2Pressed(void)
{
    return debounceButton(&button2State, (1 << PB2));
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 18 02 	call	0x430	; 0x430 <debounceButton>
}
 49e:	08 95       	ret

000004a0 <IsButton12Pressed>:

uint8_t IsButton12Pressed(void)
{
	return debounceButton(&button1State, ((1 << PB1) & (1<< PB2)));
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 18 02 	call	0x430	; 0x430 <debounceButton>
}
 4aa:	08 95       	ret

000004ac <Main_Init>:
#define LCD_RW 2
#define LCD_EN 3

void Lcd_PortConfig(void)
{
	LcdDataBusDirnReg = 0xFE; //POrt as Output
 4ac:	8e ef       	ldi	r24, 0xFE	; 254
 4ae:	8a b9       	out	0x0a, r24	; 10

// Main initialization
void Main_Init(void)
{
    Lcd_PortConfig();
    DDRC = 0xFF; // Set all pins of PORTC as output.
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	87 b9       	out	0x07, r24	; 7
    PORTC = 0xFF;
 4b4:	88 b9       	out	0x08, r24	; 8
    sei(); // Enable global interrupts
 4b6:	78 94       	sei
    Button_Init();
 4b8:	0e 94 3e 02 	call	0x47c	; 0x47c <Button_Init>
	 DDRD &= ~(1 << PD0);
 4bc:	50 98       	cbi	0x0a, 0	; 10
 4be:	08 95       	ret

000004c0 <main>:
}


int main(void)
{
    Main_Init();
 4c0:	0e 94 56 02 	call	0x4ac	; 0x4ac <Main_Init>
    USART_Init();
 4c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <USART_Init>
    Lcd_init();
 4c8:	0e 94 9a 00 	call	0x134	; 0x134 <Lcd_init>
  displayStand(); //Display greeting at the LCD
 4cc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <displayStand>
    // main endless loop
    while (1)
    {
        if (IsButton1Pressed())
        {
            PORTC ^= (1 << LED1);
 4d0:	d1 e0       	ldi	r29, 0x01	; 1
        }

        if (IsButton2Pressed())
        {
            
            PORTC ^= (1 << LED2); 
 4d2:	c2 e0       	ldi	r28, 0x02	; 2
  displayStand(); //Display greeting at the LCD

    // main endless loop
    while (1)
    {
        if (IsButton1Pressed())
 4d4:	0e 94 44 02 	call	0x488	; 0x488 <IsButton1Pressed>
 4d8:	88 23       	and	r24, r24
 4da:	51 f0       	breq	.+20     	; 0x4f0 <main+0x30>
        {
            PORTC ^= (1 << LED1);
 4dc:	88 b1       	in	r24, 0x08	; 8
 4de:	8d 27       	eor	r24, r29
 4e0:	88 b9       	out	0x08, r24	; 8
            if (PORTC & (1 << LED1))
 4e2:	40 9b       	sbis	0x08, 0	; 8
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <main+0x2c>
            {
                displayStart();
 4e6:	0e 94 a7 00 	call	0x14e	; 0x14e <displayStart>
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <main+0x30>
            }
            else
            {
                displayStand();
 4ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <displayStand>
            }
        }

        if (IsButton2Pressed())
 4f0:	0e 94 4a 02 	call	0x494	; 0x494 <IsButton2Pressed>
 4f4:	88 23       	and	r24, r24
 4f6:	51 f0       	breq	.+20     	; 0x50c <main+0x4c>
        {
            
            PORTC ^= (1 << LED2); 
 4f8:	88 b1       	in	r24, 0x08	; 8
 4fa:	8c 27       	eor	r24, r28
 4fc:	88 b9       	out	0x08, r24	; 8
            if (PORTC & (1 << LED2))
 4fe:	41 9b       	sbis	0x08, 1	; 8
 500:	03 c0       	rjmp	.+6      	; 0x508 <main+0x48>
            {
                displayEnd();
 502:	0e 94 c8 00 	call	0x190	; 0x190 <displayEnd>
 506:	02 c0       	rjmp	.+4      	; 0x50c <main+0x4c>
            }
            else
            {
                displayStand();
 508:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <displayStand>
            }
        }
		
		if (IsButton12Pressed())
 50c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <IsButton12Pressed>
 510:	88 23       	and	r24, r24
 512:	19 f0       	breq	.+6      	; 0x51a <main+0x5a>
		{
			
			//PORTC ^= (1 << LED2);
			if (PORTC & ((1 << LED2) & (1<< LED1)))
 514:	88 b1       	in	r24, 0x08	; 8
			{
				displayEnd1();
			}
			else
			{
				displayStand();
 516:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <displayStand>
			}
		}
		
		if(count>0)
 51a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 51e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 522:	18 16       	cp	r1, r24
 524:	19 06       	cpc	r1, r25
 526:	14 f4       	brge	.+4      	; 0x52c <main+0x6c>
		{
			PORTC |= (1 << 2);
 528:	42 9a       	sbi	0x08, 2	; 8
 52a:	d4 cf       	rjmp	.-88     	; 0x4d4 <main+0x14>
		}
		else
		{
			PORTC &= 0B11111011;
 52c:	42 98       	cbi	0x08, 2	; 8
 52e:	d2 cf       	rjmp	.-92     	; 0x4d4 <main+0x14>

00000530 <__divmodhi4>:
 530:	97 fb       	bst	r25, 7
 532:	07 2e       	mov	r0, r23
 534:	16 f4       	brtc	.+4      	; 0x53a <__divmodhi4+0xa>
 536:	00 94       	com	r0
 538:	07 d0       	rcall	.+14     	; 0x548 <__divmodhi4_neg1>
 53a:	77 fd       	sbrc	r23, 7
 53c:	09 d0       	rcall	.+18     	; 0x550 <__divmodhi4_neg2>
 53e:	0e 94 ac 02 	call	0x558	; 0x558 <__udivmodhi4>
 542:	07 fc       	sbrc	r0, 7
 544:	05 d0       	rcall	.+10     	; 0x550 <__divmodhi4_neg2>
 546:	3e f4       	brtc	.+14     	; 0x556 <__divmodhi4_exit>

00000548 <__divmodhi4_neg1>:
 548:	90 95       	com	r25
 54a:	81 95       	neg	r24
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__divmodhi4_neg2>:
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255

00000556 <__divmodhi4_exit>:
 556:	08 95       	ret

00000558 <__udivmodhi4>:
 558:	aa 1b       	sub	r26, r26
 55a:	bb 1b       	sub	r27, r27
 55c:	51 e1       	ldi	r21, 0x11	; 17
 55e:	07 c0       	rjmp	.+14     	; 0x56e <__udivmodhi4_ep>

00000560 <__udivmodhi4_loop>:
 560:	aa 1f       	adc	r26, r26
 562:	bb 1f       	adc	r27, r27
 564:	a6 17       	cp	r26, r22
 566:	b7 07       	cpc	r27, r23
 568:	10 f0       	brcs	.+4      	; 0x56e <__udivmodhi4_ep>
 56a:	a6 1b       	sub	r26, r22
 56c:	b7 0b       	sbc	r27, r23

0000056e <__udivmodhi4_ep>:
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	5a 95       	dec	r21
 574:	a9 f7       	brne	.-22     	; 0x560 <__udivmodhi4_loop>
 576:	80 95       	com	r24
 578:	90 95       	com	r25
 57a:	bc 01       	movw	r22, r24
 57c:	cd 01       	movw	r24, r26
 57e:	08 95       	ret

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
