
test transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b7  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:

// Initializing UART
void USART_Init(void)
{
    // Setting the baud rate is done by writing to the UBRR0H and UBRR0L registers
    UBRR0H = (UBRRVAL >> 8);    //high byte
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t)UBRRVAL;  //low byte
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    //Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
    UCSR0C = (0 << UMSEL01) | (0 << UMSEL00) | (0 << UPM01) | (0 << UPM00) | (0 << USBS0) | (0 << UCSZ02) | (1 << UCSZ01) | (1 << UCSZ00);
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    //Enable Transmitter
    UCSR0B = (1 << TXEN0);
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  96:	08 95       	ret

00000098 <USART_vSendByte>:

// Transmit data(byte) function
void USART_vSendByte(uint8_t u8Data)
{
    // Wait for transmit buffer to be empty
    while ((UCSR0A & (1 << UDRE0)) == 0);
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_vSendByte+0x4>
    // Transmit data - load data into transmit register
    UDR0 = u8Data;
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  a6:	08 95       	ret

000000a8 <Send_Packet>:
}

// Send packet of data
void Send_Packet(uint8_t addr, uint8_t cmd)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	d8 2f       	mov	r29, r24
  ae:	c6 2f       	mov	r28, r22
    USART_vSendByte(SYNC); // send synchronization byte
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <USART_vSendByte>
    USART_vSendByte(addr); // send receiver address
  b6:	8d 2f       	mov	r24, r29
  b8:	0e 94 4c 00 	call	0x98	; 0x98 <USART_vSendByte>
    USART_vSendByte(cmd);  // send command
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 4c 00 	call	0x98	; 0x98 <USART_vSendByte>
    USART_vSendByte((addr + cmd)); // send checksum
  c2:	8d 2f       	mov	r24, r29
  c4:	8c 0f       	add	r24, r28
  c6:	0e 94 4c 00 	call	0x98	; 0x98 <USART_vSendByte>
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <pir_state1>:

unsigned char pir_state1()
{
    if (!(PINC & (1 << BUTTON1))) // the button is pressed when BUTTON bit is clear
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	04 c0       	rjmp	.+8      	; 0xdc <pir_state1+0xc>
    {
        if (!(PINC & (1 << BUTTON1))) return 1; // check the state of the button again
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 95       	com	r24
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	08 95       	ret
    }
    return 0;
  dc:	80 e0       	ldi	r24, 0x00	; 0
}
  de:	08 95       	ret

000000e0 <pir_state2>:

unsigned char pir_state2()
{
	if (!(PINC & (1 << BUTTON2))) // the button is pressed when BUTTON bit is clear
  e0:	31 99       	sbic	0x06, 1	; 6
  e2:	06 c0       	rjmp	.+12     	; 0xf0 <pir_state2+0x10>
	{
		if (!(PINC & (1 << BUTTON2))) return 1; // check the state of the button again
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	86 95       	lsr	r24
  e8:	81 70       	andi	r24, 0x01	; 1
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	89 27       	eor	r24, r25
  ee:	08 95       	ret
	}
	return 0;
  f0:	80 e0       	ldi	r24, 0x00	; 0
}
  f2:	08 95       	ret

000000f4 <ir_state3>:

unsigned char ir_state3()
{
	if (!(PINB & (1 << 1))) // the button is pressed when BUTTON bit is clear
  f4:	19 99       	sbic	0x03, 1	; 3
  f6:	06 c0       	rjmp	.+12     	; 0x104 <ir_state3+0x10>
	{
		if (!(PINB & (1 << 1))) return 1; // check the state of the button again
  f8:	83 b1       	in	r24, 0x03	; 3
  fa:	86 95       	lsr	r24
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	89 27       	eor	r24, r25
 102:	08 95       	ret
	}
	return 0;
 104:	80 e0       	ldi	r24, 0x00	; 0
}
 106:	08 95       	ret

00000108 <ir_state4>:
unsigned char ir_state4()
{
	if (!(PINB & (1 << 2))) // the button is pressed when BUTTON bit is clear
 108:	1a 99       	sbic	0x03, 2	; 3
 10a:	07 c0       	rjmp	.+14     	; 0x11a <ir_state4+0x12>
	{
		if (!(PINB & (1 << 2))) return 1; // check the state of the button again
 10c:	83 b1       	in	r24, 0x03	; 3
 10e:	82 fb       	bst	r24, 2
 110:	99 27       	eor	r25, r25
 112:	90 f9       	bld	r25, 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	89 27       	eor	r24, r25
 118:	08 95       	ret
	}
	
	return 0;
 11a:	80 e0       	ldi	r24, 0x00	; 0
}
 11c:	08 95       	ret

0000011e <Main_Init>:
// Main initialization
void Main_Init(void)
{
   DDRC = 0xFF; // Set all pins of PORTC as output.
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // Set all pins of PORTB as output
 122:	84 b9       	out	0x04, r24	; 4
    DDRC &= ~(1 << BUTTON1); // Make pin 0 of PORTC as Input
 124:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << BUTTON2); // Make pin 1 of PORTC as Input
 126:	39 98       	cbi	0x07, 1	; 7
	DDRB &= ~(1 << 1); // Make pin 1 of PORTB as Input
 128:	21 98       	cbi	0x04, 1	; 4
	DDRB &= ~(1 << 2); // Make pin 2 of PORTB as Input
 12a:	22 98       	cbi	0x04, 2	; 4
 12c:	08 95       	ret

0000012e <main>:
}

// main function - entry point of the program
int main(void)
{
    USART_Init();
 12e:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
    Main_Init();
 132:	0e 94 8f 00 	call	0x11e	; 0x11e <Main_Init>

    // main endless loop
    while (1)
    {
        if (pir_state1()) // If BUTTON1 is pressed
 136:	0e 94 68 00 	call	0xd0	; 0xd0 <pir_state1>
 13a:	88 23       	and	r24, r24
 13c:	29 f0       	breq	.+10     	; 0x148 <main+0x1a>
        {
            Send_Packet(RADDR1, 0x11); // Send command to turn on LED1
 13e:	61 e1       	ldi	r22, 0x11	; 17
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 146:	04 c0       	rjmp	.+8      	; 0x150 <main+0x22>
        }
        else
        {
            Send_Packet(RADDR1, 0x00); // Send command to turn off LED1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	84 e4       	ldi	r24, 0x44	; 68
 14c:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
        }
		 if (pir_state2()) // If BUTTON1 is pressed
 150:	0e 94 70 00 	call	0xe0	; 0xe0 <pir_state2>
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <main+0x34>
		 {
			 Send_Packet(RADDR2, 0x11); // Send command to turn on LED1
 158:	61 e1       	ldi	r22, 0x11	; 17
 15a:	85 e5       	ldi	r24, 0x55	; 85
 15c:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 160:	04 c0       	rjmp	.+8      	; 0x16a <main+0x3c>
		 }
		else
		 {
			 Send_Packet(RADDR2, 0x00); // Send command to turn off LED1
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	85 e5       	ldi	r24, 0x55	; 85
 166:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
		 }
 		 if (ir_state3()) // If IR connected to PB1 detects a signal
 16a:	0e 94 7a 00 	call	0xf4	; 0xf4 <ir_state3>
 16e:	88 23       	and	r24, r24
 170:	29 f0       	breq	.+10     	; 0x17c <main+0x4e>
 		 {
 			 Send_Packet(IR1_ADDRESS, 0x11); // Send command to turn on LED1
 172:	61 e1       	ldi	r22, 0x11	; 17
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 17a:	04 c0       	rjmp	.+8      	; 0x184 <main+0x56>
 		 }
		 else
	{
	 Send_Packet(IR1_ADDRESS, 0x00); // Send command to turn off LED1
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	83 e3       	ldi	r24, 0x33	; 51
 180:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
		 }
		 
		 if (ir_state4()) // If IR connected to PB2 detects a signal
 184:	0e 94 84 00 	call	0x108	; 0x108 <ir_state4>
 188:	88 23       	and	r24, r24
 18a:	29 f0       	breq	.+10     	; 0x196 <main+0x68>
 		 {
 			 Send_Packet(IR2_ADDRESS, 0x11); 
 18c:	61 e1       	ldi	r22, 0x11	; 17
 18e:	82 e2       	ldi	r24, 0x22	; 34
 190:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 194:	d0 cf       	rjmp	.-96     	; 0x136 <main+0x8>
 		 }
		else
		 {
			 Send_Packet(IR2_ADDRESS, 0x00); 
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	82 e2       	ldi	r24, 0x22	; 34
 19a:	0e 94 54 00 	call	0xa8	; 0xa8 <Send_Packet>
 19e:	cb cf       	rjmp	.-106    	; 0x136 <main+0x8>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
